import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import p01_Database.Database;

import javax.naming.OperationNotSupportedException;

public class DatabaseTest {

    private Database database;
    private static final Integer[] NUMBERS = {5, 8, 20, 67, 98};

    @Before
    public void prepareDatabase() throws OperationNotSupportedException {
        database = new Database(NUMBERS);
    }

    //тестваме конструктора
    //1.дали ми създава правилно обект
    @Test
    public void test_ConstructorHasToCreateValidObject() {
        //вземам елементите на създадения обект и да проверя дали са същите като тези които подавам 5,8...
        Integer[] databaseElements = database.getElements();// тук тестваме и метода get
        Assert.assertEquals("Count of Elements is incorrect", databaseElements.length, NUMBERS.length);
        //след като съвпада броя, проверявам дали елементите съвпадат в двата масива
        for (int i = 0; i < databaseElements.length; i++) {
            Assert.assertEquals("Arrays are not the same", NUMBERS[i], databaseElements[i]);
        }
    }

    //2.случай в който елементите са над 16
    @Test(expected = OperationNotSupportedException.class)
    public void test_ConstructorThrowExcWhenUseMoreThanSixteenElements() throws OperationNotSupportedException {
        Integer[] numbers = new Integer[17];
        new Database(numbers);
    }

    //3.случей в който елементите са под 1
    @Test(expected = OperationNotSupportedException.class)
    public void test_ConstructorThrowExcWhenUseLessThanOneElements() throws OperationNotSupportedException {
        Integer[] numbers = new Integer[0];
        new Database(numbers);
    }

    //тестваме аdd
    //1.ако елемента е null
    @Test(expected = OperationNotSupportedException.class)
    public void test_AddShouldThrowWenParamNull() throws OperationNotSupportedException {
        database.add(null);
    }

    //2.ако подадения елемент не е null - успешно го добавя към списъка
    @Test
    public void test_AddShouldAddElement() throws OperationNotSupportedException {
        database.add(7);
        Assert.assertEquals(database.getElements().length, 6);
        Assert.assertEquals(database.getElements()[database.getElements().length - 1], Integer.valueOf(7));
    }

    //тестваме метода remove
    //1. да няма елементи в масива
    @Test(expected = OperationNotSupportedException.class)
    public void test_RemoveShouldThrowWithEmptyData() throws OperationNotSupportedException {
        //премахваме всички елементи
        for (int i = 0; i < NUMBERS.length; i++) {
            database.remove();
        }
        // получаваме празен масив
        //remove
        database.remove();
    }

    //2.дали правилно премахва елемент
    @Test
    public void test_RemoveLastElement() throws OperationNotSupportedException {
        database.remove();
        Assert.assertEquals(database.getElements().length, NUMBERS.length - 1);
        Assert.assertEquals(database.getElements()[3], Integer.valueOf(67));//това е предпоследния елемент
    }


}
